#!/usr/bin/env node

'use strict';

var child = require('child_process')
  , format = require('util').format
  , shell = require('shelljs')
  , hook = module.exports = {}
  , path = require('path');

/**
 * The contents of the `package.json`
 *
 * @type {Object}
 * @public
 */
hook.json = {};

/**
 * Location of the `npm` binary. Will be set to the `absolute` path during
 * initialization.
 *
 * @type {String}
 * @public
 */
hook.npm = '';

/**
 * Location of the `git` binary. Will be set to the `absolute` path during
 * initialization.
 *
 * @type {String}
 * @public
 */
hook.git = '';

/**
 * Helper log function which will prefix all output with the name of our module
 * so the users know which module is responsible for the output.
 *
 * @param {Array} lines The lines that needs to be logged to the user.
 * @param {Number} exit Exit code.
 * @api public
 */
hook.log = function log(lines, exit) {
  if (!Array.isArray(lines)) lines = lines.split('\n');
  if ('number' !== typeof exit) exit = 1;

  lines = lines.map(function map(line) {
    return 'pre-commit: '+ line;
  });

  lines.push('');     // Whitespace at the end of the log.
  lines.unshift('');  // Whitespace at the beginning.

  if (!hook.json['pre-commit.silent']) lines.forEach(function output(line) {
    if (exit) console.error(line);
    else console.log(line);
  });

  process.exit(exit);
};

hook.initialize = function initialize() {
  var failure = 'Failed to locate the `%s` binary due to an error: %s'
    , template
    , status
    , root;

  try { hook.git = shell.which('git'); }
  catch (e) { return hook.log(format(failure, 'git', e.message)); }

  try { hook.npm = shell.which('npm'); }
  catch (e) { return hook.log(format(failure, 'npm', e.message)); }

  root = shell.exec(hook.git +' rev-parse --show-toplevel', { silent: true });
  status = shell.exec(hook.git +' status --porcelain', { silent: true });

  //
  // Process the output of the git hook's.
  //
  if (root.code) return hook.log('Failed to get `.git` root: '+ root.output);
  if (status.code) return hook.log('Failed to get `get status`: '+ status.output);

  hook.root = root.output.trim();
  hook.status = status.output.trim();

  try { hook.json = require(path.join(hook.root, 'package.json')); }
  catch (e) { return hook.log('Failed to parse `package.json`: '+ e.message); }

  //
  // Check for changes to ensure that we don't run our hooks for nothing.
  //
  if (!hook.status.length) {
    return hook.log('No changes detected. Continuing.', 0);
  }

  //
  // If we have a git template we should configure it before checking for
  // scripts so it will still be applied even if we don't have anything to
  // execute.
  //
  if (template = hook.json['pre-commit.commit-template']) {
    shell.exec(hook.git +' config commit.template "'+ template +'"', { 
      silent: true
    });
  }

  if (!hook.json.scripts) {
    return hook.log('Missing `scripts` in `package.json`. Continuing.', 0);
  }

  hook.run();
};

/**
 * Run the hooks.
 *
 * @api private
 */
hook.run = function runner() {
  var silent = !!hook.json['pre-commit.silent']
    , pre = hook.json['pr-commit']
    , run = [];

  if ('string' === typeof pre) pre = pre.split(/[, ]+/);

  //
  // If we have scripts set in our `pre-commit` field we should run those. If
  // they are not available we need to check if `test` is set to something
  // sensible so we can use that as default fallback.
  //
  if (Array.isArray(pre)) {
    Array.prototype.push.apply(run, pre);
  } else if (
       hook.json.scripts
    && hook.json.scripts.test
    && hook.json.scripts.test !== 'echo "Error: no test specified" && exit 1'
  ) {
    run.push('test');
  }

  if (!run.length) return hook.log('No scripts to run. All good.', 0);

  if (run.every(function execute(script) {
    return shell.exec(hook.npm +' run '+ script, { 
      silent: silent 
    }).code === 0;
  })) return process.exit(0);

  hook.log([
    'You\'ve failed to pass all the git pre-commit hooks.',
    '',
    'If you\'re feeling adventurous you can skip the hooks using:',
    '',
    '  git commit -n (or --no-verify)',
    '',
    'But this is obviously not advised as your clearly broke something.'
  ]);
};

//
// Run the hook if we are not required.
//
if (module === require.main) hook.initialize();
